// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password_hash String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  transactions  Transaction[]
  categories    Category[]
  budgets       Budget[]
  tags          Tag[]

  @@map("users")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  type         String // "income" or "expense"
  color        String?
  icon         String?
  user_id      Int
  is_default   Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

model Transaction {
  id          Int              @id @default(autoincrement())
  user_id     Int
  amount      Float
  description String
  date        DateTime
  category_id Int?
  type        String // "income" or "expense"
  notes       String?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  user        User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category?        @relation(fields: [category_id], references: [id])
  tags        TransactionTag[]

  @@map("transactions")
}

model Budget {
  id          Int       @id @default(autoincrement())
  user_id     Int
  category_id Int
  amount      Float
  period      String // "weekly", "monthly", "yearly"
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [category_id], references: [id])

  @@map("budgets")
}

model Tag {
  id           Int              @id @default(autoincrement())
  name         String
  user_id      Int
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  user         User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions TransactionTag[]

  @@map("tags")
}

model TransactionTag {
  transaction_id Int
  tag_id         Int
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  tag            Tag         @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([transaction_id, tag_id])
  @@map("transaction_tags")
}
